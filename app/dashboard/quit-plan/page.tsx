"use client"

import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Label } from "@/components/ui/label"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Badge } from "@/components/ui/badge"
import { Target, Calendar, Edit, Trash2, Plus, CheckCircle, ArrowRight, ArrowLeft, TrendingDown } from "lucide-react"
import { useState } from "react"

interface Milestone {
  date: string
  goal: string
  description?: string
  completed: boolean
}

interface Plan {
  id: number
  title: string
  reason: string
  method: string
  startDate: string
  targetDate: string
  milestones: Milestone[]
  status: string
  template?: string
}

interface TimelineItem {
  week: number
  goal: string
  description: string
}

interface Template {
  id: number
  name: string
  description: string
  method: string
  duration: string
  difficulty: string
  successRate: string
  icon: string
  color: string
  timeline: TimelineItem[]
  tips: string[]
}

export default function QuitPlan() {
  const [plans, setPlans] = useState<Plan[]>([
    {
      id: 1,
      title: "K·∫ø ho·∫°ch cai thu·ªëc 3 th√°ng",
      reason: "V√¨ s·ª©c kh·ªèe gia ƒë√¨nh v√† ti·∫øt ki·ªám chi ph√≠",
      method: "gradual",
      startDate: "2024-01-15",
      targetDate: "2024-04-15",
      milestones: [
        { date: "2024-01-22", goal: "Gi·∫£m xu·ªëng 5 ƒëi·∫øu/ng√†y", completed: true },
        { date: "2024-02-01", goal: "Gi·∫£m xu·ªëng 2 ƒëi·∫øu/ng√†y", completed: true },
        { date: "2024-02-15", goal: "Ho√†n to√†n kh√¥ng h√∫t", completed: false },
      ],
      status: "active",
    },
  ])

  const [showNewPlanFlow, setShowNewPlanFlow] = useState(false)
  const [currentStep, setCurrentStep] = useState(1) // 1: Choose Template, 2: Customize, 3: Review
  const [selectedTemplate, setSelectedTemplate] = useState<Template | null>(null)
  const [customPlan, setCustomPlan] = useState<Omit<Plan, "id" | "status" | "template">>({
    title: "",
    reason: "",
    method: "",
    startDate: "",
    targetDate: "",
    milestones: [],
  })

  // Predefined plan templates
  const planTemplates: Template[] = [
    {
      id: 1,
      name: "Gi·∫£m d·∫ßn 4 tu·∫ßn",
      description: "Ph√π h·ª£p cho ng∆∞·ªùi h√∫t 10-20 ƒëi·∫øu/ng√†y, mu·ªën gi·∫£m t·ª´ t·ª´ ƒë·ªÉ tr√°nh shock",
      method: "gradual",
      duration: "4 tu·∫ßn",
      difficulty: "D·ªÖ",
      successRate: "75%",
      icon: "üìâ",
      color: "green",
      timeline: [
        { week: 1, goal: "Gi·∫£m 50% s·ªë ƒëi·∫øu", description: "T·ª´ X ƒëi·∫øu xu·ªëng X/2 ƒëi·∫øu/ng√†y" },
        { week: 2, goal: "Gi·∫£m 75% s·ªë ƒëi·∫øu", description: "Ch·ªâ h√∫t 1/4 s·ªë ƒëi·∫øu ban ƒë·∫ßu" },
        { week: 3, goal: "Ch·ªâ h√∫t 1-2 ƒëi·∫øu/ng√†y", description: "G·∫ßn nh∆∞ ho√†n to√†n cai" },
        { week: 4, goal: "Ho√†n to√†n kh√¥ng h√∫t", description: "D·ª´ng ho√†n to√†n vi·ªác h√∫t thu·ªëc" },
      ],
      tips: [
        "Thay th·∫ø thu·ªëc b·∫±ng k·∫πo cao su kh√¥ng ƒë∆∞·ªùng",
        "T·∫≠p th·ªÉ d·ª•c nh·∫π khi th√®m thu·ªëc",
        "Tr√°nh xa nh·ªØng n∆°i th∆∞·ªùng h√∫t thu·ªëc",
      ],
    },
    {
      id: 2,
      name: "D·ª´ng ngay l·∫≠p t·ª©c",
      description: "Cho ng∆∞·ªùi c√≥ √Ω ch√≠ m·∫°nh m·∫Ω, mu·ªën d·ª´ng ho√†n to√†n ngay t·ª´ ng√†y ƒë·∫ßu",
      method: "cold_turkey",
      duration: "2 tu·∫ßn",
      difficulty: "Kh√≥",
      successRate: "60%",
      icon: "üõë",
      color: "red",
      timeline: [
        { week: 1, goal: "Ho√†n to√†n kh√¥ng h√∫t", description: "D·ª´ng 100% t·ª´ ng√†y ƒë·∫ßu ti√™n" },
        { week: 2, goal: "V∆∞·ª£t qua c∆°n th√®m", description: "Ki·ªÉm so√°t c·∫£m gi√°c th√®m thu·ªëc" },
      ],
      tips: [
        "Chu·∫©n b·ªã tinh th·∫ßn v·ªØng v√†ng",
        "Lo·∫°i b·ªè t·∫•t c·∫£ thu·ªëc l√° kh·ªèi nh√†",
        "T√¨m ho·∫°t ƒë·ªông thay th·∫ø ngay l·∫≠p t·ª©c",
        "C√≥ h·ªó tr·ª£ t·ª´ gia ƒë√¨nh v√† b·∫°n b√®",
      ],
    },
    {
      id: 3,
      name: "Thay th·∫ø Nicotine",
      description: "S·ª≠ d·ª•ng k·∫πo cao su, mi·∫øng d√°n nicotine ƒë·ªÉ gi·∫£m d·∫ßn c∆°n th√®m",
      method: "nicotine_replacement",
      duration: "8 tu·∫ßn",
      difficulty: "Trung b√¨nh",
      successRate: "70%",
      icon: "üîÑ",
      color: "blue",
      timeline: [
        { week: 1, goal: "B·∫Øt ƒë·∫ßu thay th·∫ø", description: "D√πng k·∫πo cao su/mi·∫øng d√°n nicotine" },
        { week: 2, goal: "Gi·∫£m thu·ªëc l√° 50%", description: "K·∫øt h·ª£p nicotine thay th·∫ø v√† gi·∫£m thu·ªëc" },
        { week: 4, goal: "Ho√†n to√†n kh√¥ng h√∫t", description: "Ch·ªâ d√πng s·∫£n ph·∫©m thay th·∫ø nicotine" },
        { week: 8, goal: "Ng·ª´ng thay th·∫ø nicotine", description: "Ho√†n to√†n s·∫°ch nicotine" },
      ],
      tips: [
        "Tham kh·∫£o √Ω ki·∫øn b√°c sƒ© v·ªÅ li·ªÅu l∆∞·ª£ng",
        "Kh√¥ng h√∫t thu·ªëc khi ƒëang d√πng s·∫£n ph·∫©m thay th·∫ø",
        "Gi·∫£m d·∫ßn li·ªÅu l∆∞·ª£ng theo k·∫ø ho·∫°ch",
      ],
    },
    {
      id: 4,
      name: "H·ªó tr·ª£ thu·ªëc men",
      description: "K·∫øt h·ª£p v·ªõi thu·ªëc cai thu·ªëc theo toa b√°c sƒ© (Champix, Zyban...)",
      method: "medication",
      duration: "12 tu·∫ßn",
      difficulty: "Trung b√¨nh",
      successRate: "80%",
      icon: "üíä",
      color: "purple",
      timeline: [
        { week: 1, goal: "B·∫Øt ƒë·∫ßu d√πng thu·ªëc", description: "U·ªëng thu·ªëc theo toa, v·∫´n h√∫t b√¨nh th∆∞·ªùng" },
        { week: 2, goal: "Ng√†y quit day", description: "D·ª´ng h√∫t thu·ªëc, ti·∫øp t·ª•c d√πng thu·ªëc" },
        { week: 8, goal: "·ªîn ƒë·ªãnh kh√¥ng h√∫t", description: "Duy tr√¨ kh√¥ng h√∫t, ti·∫øp t·ª•c thu·ªëc" },
        { week: 12, goal: "Ho√†n th√†nh li·ªáu tr√¨nh", description: "Ng·ª´ng thu·ªëc, ho√†n to√†n cai th√†nh c√¥ng" },
      ],
      tips: ["B·∫Øt bu·ªôc ph·∫£i c√≥ toa b√°c sƒ©", "Theo d√µi t√°c d·ª•ng ph·ª•", "Kh√¥ng b·ªè thu·ªëc ƒë·ªôt ng·ªôt", "T√°i kh√°m ƒë·ªãnh k·ª≥"],
    },
    {
      id: 5,
      name: "K·∫ø ho·∫°ch t√πy ch·ªânh",
      description: "T·∫°o k·∫ø ho·∫°ch ri√™ng ph√π h·ª£p v·ªõi t√¨nh tr·∫°ng c√° nh√¢n c·ªßa b·∫°n",
      method: "custom",
      duration: "T√πy ch·ªânh",
      difficulty: "T√πy ch·ªânh",
      successRate: "T√πy thu·ªôc",
      icon: "‚öôÔ∏è",
      color: "gray",
      timeline: [],
      tips: ["B·∫°n s·∫Ω t·ª± thi·∫øt k·∫ø timeline v√† milestones ph√π h·ª£p"],
    },
  ]

  const handleSelectTemplate = (template: Template) => {
    setSelectedTemplate(template)
    if (template.method === "custom") {
      setCustomPlan({
        title: "",
        reason: "",
        method: "gradual",
        startDate: "",
        targetDate: "",
        milestones: [],
      })
    } else {
      // Pre-fill based on template
      const startDate = new Date()
      const targetDate = new Date()

      // Calculate target date based on template duration
      const durationWeeks = Number.parseInt(template.duration.split(" ")[0]) || 4
      targetDate.setDate(startDate.getDate() + durationWeeks * 7)

      setCustomPlan({
        title: template.name,
        reason: "",
        method: template.method,
        startDate: startDate.toISOString().split("T")[0],
        targetDate: targetDate.toISOString().split("T")[0],
        milestones: template.timeline.map((item, index) => {
          const milestoneDate = new Date(startDate)
          milestoneDate.setDate(startDate.getDate() + item.week * 7)
          return {
            date: milestoneDate.toISOString().split("T")[0],
            goal: item.goal,
            description: item.description,
            completed: false,
          }
        }),
      })
    }
    setCurrentStep(2)
  }

  const handleCreatePlan = () => {
    if (customPlan.title && customPlan.reason && customPlan.startDate && customPlan.targetDate) {
      const plan = {
        id: Date.now(),
        ...customPlan,
        status: "draft",
        template: selectedTemplate?.name,
      }
      setPlans([...plans, plan])

      // Reset form
      setShowNewPlanFlow(false)
      setCurrentStep(1)
      setSelectedTemplate(null)
      setCustomPlan({
        title: "",
        reason: "",
        method: "gradual",
        startDate: "",
        targetDate: "",
        milestones: [],
      })
    }
  }

  const handleDeletePlan = (id: number) => {
    setPlans(plans.filter((plan) => plan.id !== id))
  }

  const toggleMilestone = (planId: number, milestoneIndex: number) => {
    setPlans(
      plans.map((plan) => {
        if (plan.id === planId) {
          const updatedMilestones = [...plan.milestones]
          updatedMilestones[milestoneIndex].completed = !updatedMilestones[milestoneIndex].completed
          return { ...plan, milestones: updatedMilestones }
        }
        return plan
      }),
    )
  }

  const addMilestone = () => {
    setCustomPlan({
      ...customPlan,
      milestones: [
        ...customPlan.milestones,
        {
          date: "",
          goal: "",
          description: "",
          completed: false,
        },
      ],
    })
  }

  const updateMilestone = (index: number, field: keyof Milestone, value: string) => {
    const updatedMilestones = [...customPlan.milestones]
    updatedMilestones[index] = {
      ...updatedMilestones[index],
      [field]: value,
    }
    setCustomPlan({ ...customPlan, milestones: updatedMilestones })
  }

  const removeMilestone = (index: number) => {
    const updatedMilestones = customPlan.milestones.filter((_, i) => i !== index)
    setCustomPlan({ ...customPlan, milestones: updatedMilestones })
  }

  const renderStepIndicator = () => (
    <div className="flex items-center justify-center mb-6">
      <div className="flex items-center space-x-4">
        {[1, 2, 3].map((step) => (
          <div key={step} className="flex items-center">
            <div
              className={`w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium ${
                currentStep >= step ? "bg-blue-600 text-white" : "bg-gray-200 text-gray-600"
              }`}
            >
              {step}
            </div>
            {step < 3 && (
              <ArrowRight className={`w-4 h-4 mx-2 ${currentStep > step ? "text-blue-600" : "text-gray-400"}`} />
            )}
          </div>
        ))}
      </div>
    </div>
  )

  const renderTemplateSelection = () => (
    <Card>
      <CardHeader>
        <CardTitle>B∆∞·ªõc 1: Ch·ªçn lo·∫°i k·∫ø ho·∫°ch cai thu·ªëc</CardTitle>
        <CardDescription>Ch·ªçn ph∆∞∆°ng ph√°p ph√π h·ª£p v·ªõi t√¨nh tr·∫°ng v√† mong mu·ªën c·ªßa b·∫°n</CardDescription>
      </CardHeader>
      <CardContent>
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
          {planTemplates.map((template) => (
            <div
              key={template.id}
              className={`p-4 border-2 rounded-lg cursor-pointer transition-all hover:shadow-md ${
                selectedTemplate?.id === template.id ? "border-blue-500 bg-blue-50" : "border-gray-200"
              }`}
              onClick={() => handleSelectTemplate(template)}
            >
              <div className="text-center mb-3">
                <div className="text-3xl mb-2">{template.icon}</div>
                <h3 className="font-bold text-lg">{template.name}</h3>
                <p className="text-sm text-gray-600 mt-1">{template.description}</p>
              </div>

              <div className="space-y-2">
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600">Th·ªùi gian:</span>
                  <Badge variant="outline">{template.duration}</Badge>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600">ƒê·ªô kh√≥:</span>
                  <Badge
                    variant="outline"
                    className={
                      template.difficulty === "D·ªÖ"
                        ? "text-green-600 border-green-600"
                        : template.difficulty === "Trung b√¨nh"
                          ? "text-yellow-600 border-yellow-600"
                          : template.difficulty === "Kh√≥"
                            ? "text-red-600 border-red-600"
                            : ""
                    }
                  >
                    {template.difficulty}
                  </Badge>
                </div>
                <div className="flex justify-between text-sm">
                  <span className="text-gray-600">T·ª∑ l·ªá th√†nh c√¥ng:</span>
                  <Badge variant="outline" className="text-blue-600 border-blue-600">
                    {template.successRate}
                  </Badge>
                </div>
              </div>

              {template.timeline.length > 0 && (
                <div className="mt-3 pt-3 border-t">
                  <h4 className="text-sm font-medium mb-2">Timeline:</h4>
                  <div className="space-y-1">
                    {template.timeline.slice(0, 2).map((item, index) => (
                      <div key={index} className="text-xs text-gray-600">
                        Tu·∫ßn {item.week}: {item.goal}
                      </div>
                    ))}
                    {template.timeline.length > 2 && (
                      <div className="text-xs text-gray-500">+{template.timeline.length - 2} m·ªëc kh√°c...</div>
                    )}
                  </div>
                </div>
              )}
            </div>
          ))}
        </div>

        <div className="flex justify-end mt-6">
          <Button onClick={() => setCurrentStep(2)} disabled={!selectedTemplate} className="flex items-center gap-2">
            Ti·∫øp t·ª•c
            <ArrowRight className="w-4 h-4" />
          </Button>
        </div>
      </CardContent>
    </Card>
  )

  const renderCustomization = () => (
    <Card>
      <CardHeader>
        <CardTitle>B∆∞·ªõc 2: T√πy ch·ªânh k·∫ø ho·∫°ch</CardTitle>
        <CardDescription>ƒêi·ªÅu ch·ªânh chi ti·∫øt k·∫ø ho·∫°ch "{selectedTemplate?.name}" cho ph√π h·ª£p v·ªõi b·∫°n</CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Basic Info */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="title">T√™n k·∫ø ho·∫°ch</Label>
            <Input
              id="title"
              value={customPlan.title}
              onChange={(e) => setCustomPlan({ ...customPlan, title: e.target.value })}
              placeholder="V√≠ d·ª•: K·∫ø ho·∫°ch cai thu·ªëc c·ªßa t√¥i"
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="method">Ph∆∞∆°ng ph√°p</Label>
            <Select
              value={customPlan.method}
              onValueChange={(value) => setCustomPlan({ ...customPlan, method: value })}
            >
              <SelectTrigger>
                <SelectValue />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="gradual">Gi·∫£m d·∫ßn</SelectItem>
                <SelectItem value="cold_turkey">D·ª´ng ngay l·∫≠p t·ª©c</SelectItem>
                <SelectItem value="nicotine_replacement">Thay th·∫ø nicotine</SelectItem>
                <SelectItem value="medication">D√πng thu·ªëc h·ªó tr·ª£</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        <div className="space-y-2">
          <Label htmlFor="reason">L√Ω do cai thu·ªëc</Label>
          <Textarea
            id="reason"
            value={customPlan.reason}
            onChange={(e) => setCustomPlan({ ...customPlan, reason: e.target.value })}
            placeholder="V√≠ d·ª•: V√¨ s·ª©c kh·ªèe gia ƒë√¨nh, ti·∫øt ki·ªám chi ph√≠..."
            rows={3}
          />
        </div>

        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="startDate">Ng√†y b·∫Øt ƒë·∫ßu</Label>
            <Input
              id="startDate"
              type="date"
              value={customPlan.startDate}
              onChange={(e) => setCustomPlan({ ...customPlan, startDate: e.target.value })}
            />
          </div>

          <div className="space-y-2">
            <Label htmlFor="targetDate">Ng√†y m·ª•c ti√™u</Label>
            <Input
              id="targetDate"
              type="date"
              value={customPlan.targetDate}
              onChange={(e) => setCustomPlan({ ...customPlan, targetDate: e.target.value })}
            />
          </div>
        </div>

        {/* Milestones */}
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <Label>C√°c m·ªëc th·ªùi gian</Label>
            <Button variant="outline" size="sm" onClick={addMilestone}>
              <Plus className="w-4 h-4 mr-1" />
              Th√™m m·ªëc
            </Button>
          </div>

          <div className="space-y-3">
            {customPlan.milestones.map((milestone, index) => (
              <div key={index} className="p-4 border rounded-lg">
                <div className="grid grid-cols-1 md:grid-cols-3 gap-3">
                  <div className="space-y-2">
                    <Label>Ng√†y</Label>
                    <Input
                      type="date"
                      value={milestone.date}
                      onChange={(e) => updateMilestone(index, "date", e.target.value)}
                    />
                  </div>
                  <div className="space-y-2">
                    <Label>M·ª•c ti√™u</Label>
                    <Input
                      value={milestone.goal}
                      onChange={(e) => updateMilestone(index, "goal", e.target.value)}
                      placeholder="V√≠ d·ª•: Gi·∫£m xu·ªëng 5 ƒëi·∫øu/ng√†y"
                    />
                  </div>
                  <div className="space-y-2">
                    <Label>M√¥ t·∫£</Label>
                    <div className="flex gap-2">
                      <Input
                        value={milestone.description}
                        onChange={(e) => updateMilestone(index, "description", e.target.value)}
                        placeholder="Chi ti·∫øt v·ªÅ m·ª•c ti√™u"
                      />
                      <Button variant="outline" size="sm" onClick={() => removeMilestone(index)}>
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>

        {/* Template Tips */}
        {selectedTemplate?.tips && (
          <div className="p-4 bg-blue-50 rounded-lg">
            <h4 className="font-medium mb-2 flex items-center gap-2">
              <TrendingDown className="w-4 h-4 text-blue-600" />
              M·∫πo cho ph∆∞∆°ng ph√°p "{selectedTemplate.name}"
            </h4>
            <ul className="space-y-1">
              {selectedTemplate.tips.map((tip, index) => (
                <li key={index} className="text-sm text-blue-700 flex items-start gap-2">
                  <span className="text-blue-500 mt-1">‚Ä¢</span>
                  {tip}
                </li>
              ))}
            </ul>
          </div>
        )}

        <div className="flex justify-between">
          <Button variant="outline" onClick={() => setCurrentStep(1)}>
            <ArrowLeft className="w-4 h-4 mr-1" />
            Quay l·∫°i
          </Button>
          <Button onClick={() => setCurrentStep(3)}>
            Xem tr∆∞·ªõc
            <ArrowRight className="w-4 h-4 ml-1" />
          </Button>
        </div>
      </CardContent>
    </Card>
  )

  const renderReview = () => (
    <Card>
      <CardHeader>
        <CardTitle>B∆∞·ªõc 3: Xem tr∆∞·ªõc v√† x√°c nh·∫≠n</CardTitle>
        <CardDescription>Ki·ªÉm tra l·∫°i k·∫ø ho·∫°ch tr∆∞·ªõc khi t·∫°o</CardDescription>
      </CardHeader>
      <CardContent className="space-y-6">
        {/* Plan Overview */}
        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="space-y-4">
            <div>
              <h4 className="font-medium text-gray-700">T√™n k·∫ø ho·∫°ch</h4>
              <p className="text-lg font-semibold">{customPlan.title}</p>
            </div>
            <div>
              <h4 className="font-medium text-gray-700">Ph∆∞∆°ng ph√°p</h4>
              <Badge variant="outline">{customPlan.method}</Badge>
            </div>
            <div>
              <h4 className="font-medium text-gray-700">Th·ªùi gian</h4>
              <p>
                {new Date(customPlan.startDate).toLocaleDateString("vi-VN")} -{" "}
                {new Date(customPlan.targetDate).toLocaleDateString("vi-VN")}
              </p>
            </div>
          </div>

          <div>
            <h4 className="font-medium text-gray-700 mb-2">L√Ω do cai thu·ªëc</h4>
            <p className="text-gray-600 bg-gray-50 p-3 rounded-lg">{customPlan.reason}</p>
          </div>
        </div>

        {/* Timeline Preview */}
        <div>
          <h4 className="font-medium text-gray-700 mb-3">Timeline c√°c m·ªëc th·ªùi gian</h4>
          <div className="space-y-3">
            {customPlan.milestones.map((milestone, index) => (
              <div key={index} className="flex items-center gap-4 p-3 bg-gray-50 rounded-lg">
                <div className="w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center">
                  <span className="text-sm font-medium text-blue-600">{index + 1}</span>
                </div>
                <div className="flex-1">
                  <div className="font-medium">{milestone.goal}</div>
                  <div className="text-sm text-gray-600">{milestone.description}</div>
                </div>
                <div className="text-sm text-gray-500">{new Date(milestone.date).toLocaleDateString("vi-VN")}</div>
              </div>
            ))}
          </div>
        </div>

        <div className="flex justify-between">
          <Button variant="outline" onClick={() => setCurrentStep(2)}>
            <ArrowLeft className="w-4 h-4 mr-1" />
            Ch·ªânh s·ª≠a
          </Button>
          <div className="flex gap-2">
            <Button variant="outline" onClick={() => setShowNewPlanFlow(false)}>
              H·ªßy
            </Button>
            <Button onClick={handleCreatePlan}>T·∫°o k·∫ø ho·∫°ch</Button>
          </div>
        </div>
      </CardContent>
    </Card>
  )

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">K·∫ø ho·∫°ch cai thu·ªëc</h1>
          <p className="text-gray-600">T·∫°o v√† qu·∫£n l√Ω k·∫ø ho·∫°ch cai thu·ªëc c·ªßa b·∫°n</p>
        </div>
        <Button onClick={() => setShowNewPlanFlow(true)} className="flex items-center gap-2">
          <Plus className="h-4 w-4" />
          T·∫°o k·∫ø ho·∫°ch m·ªõi
        </Button>
      </div>

      {/* New Plan Creation Flow */}
      {showNewPlanFlow && (
        <div className="space-y-6">
          {renderStepIndicator()}

          {currentStep === 1 && renderTemplateSelection()}
          {currentStep === 2 && renderCustomization()}
          {currentStep === 3 && renderReview()}
        </div>
      )}

      {/* Existing Plans */}
      {!showNewPlanFlow && (
        <div className="space-y-4">
          {plans.map((plan) => (
            <Card key={plan.id}>
              <CardHeader>
                <div className="flex items-center justify-between">
                  <div>
                    <CardTitle className="flex items-center gap-2">
                      <Target className="h-5 w-5 text-blue-600" />
                      {plan.title}
                      {plan.template && (
                        <Badge variant="secondary" className="ml-2">
                          {plan.template}
                        </Badge>
                      )}
                    </CardTitle>
                    <CardDescription className="mt-1">{plan.reason}</CardDescription>
                  </div>
                  <div className="flex items-center gap-2">
                    <Badge variant={plan.status === "active" ? "default" : "secondary"}>
                      {plan.status === "active" ? "ƒêang th·ª±c hi·ªán" : "Nh√°p"}
                    </Badge>
                    <Button variant="outline" size="sm">
                      <Edit className="h-4 w-4" />
                    </Button>
                    <Button variant="outline" size="sm" onClick={() => handleDeletePlan(plan.id)}>
                      <Trash2 className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </CardHeader>
              <CardContent>
                <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
                  <div className="text-center p-3 bg-blue-50 rounded-lg">
                    <div className="text-sm text-gray-600">Ph∆∞∆°ng ph√°p</div>
                    <div className="font-medium">
                      {plan.method === "gradual"
                        ? "Gi·∫£m d·∫ßn"
                        : plan.method === "cold_turkey"
                          ? "D·ª´ng ngay"
                          : plan.method === "nicotine_replacement"
                            ? "Thay th·∫ø nicotine"
                            : plan.method === "medication"
                              ? "D√πng thu·ªëc"
                              : plan.method}
                    </div>
                  </div>

                  <div className="text-center p-3 bg-green-50 rounded-lg">
                    <div className="text-sm text-gray-600">Ng√†y b·∫Øt ƒë·∫ßu</div>
                    <div className="font-medium">{new Date(plan.startDate).toLocaleDateString("vi-VN")}</div>
                  </div>

                  <div className="text-center p-3 bg-purple-50 rounded-lg">
                    <div className="text-sm text-gray-600">M·ª•c ti√™u</div>
                    <div className="font-medium">{new Date(plan.targetDate).toLocaleDateString("vi-VN")}</div>
                  </div>
                </div>

                {plan.milestones.length > 0 && (
                  <div>
                    <h4 className="font-medium mb-3 flex items-center gap-2">
                      <Calendar className="h-4 w-4" />
                      M·ªëc th·ªùi gian
                    </h4>
                    <div className="space-y-2">
                      {plan.milestones.map((milestone, index) => (
                        <div
                          key={index}
                          className={`flex items-center gap-3 p-3 rounded-lg border ${
                            milestone.completed ? "bg-green-50 border-green-200" : "bg-gray-50 border-gray-200"
                          }`}
                        >
                          <button
                            onClick={() => toggleMilestone(plan.id, index)}
                            className={`flex-shrink-0 ${milestone.completed ? "text-green-600" : "text-gray-400"}`}
                          >
                            <CheckCircle className="h-5 w-5" />
                          </button>
                          <div className="flex-1">
                            <div className="font-medium">{milestone.goal}</div>
                            <div className="text-sm text-gray-600">
                              {new Date(milestone.date).toLocaleDateString("vi-VN")}
                            </div>
                          </div>
                          {milestone.completed && (
                            <Badge variant="secondary" className="bg-green-100 text-green-800">
                              Ho√†n th√†nh
                            </Badge>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          ))}
        </div>
      )}

      {plans.length === 0 && !showNewPlanFlow && (
        <Card>
          <CardContent className="text-center py-12">
            <Target className="h-12 w-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">Ch∆∞a c√≥ k·∫ø ho·∫°ch cai thu·ªëc</h3>
            <p className="text-gray-600 mb-4">T·∫°o k·∫ø ho·∫°ch cai thu·ªëc ƒë·∫ßu ti√™n ƒë·ªÉ b·∫Øt ƒë·∫ßu h√†nh tr√¨nh c·ªßa b·∫°n</p>
            <Button onClick={() => setShowNewPlanFlow(true)}>T·∫°o k·∫ø ho·∫°ch ƒë·∫ßu ti√™n</Button>
          </CardContent>
        </Card>
      )}
    </div>
  )
}
